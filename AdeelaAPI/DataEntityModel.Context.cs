//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdeelaAPI
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class AdeelaEntities : DbContext
    {
        public AdeelaEntities()
            : base("name=AdeelaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<UserInsert_Result> UserInsert(string fullName, string email, string phone, string password, Nullable<int> typeID)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserInsert_Result>("UserInsert", fullNameParameter, emailParameter, phoneParameter, passwordParameter, typeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UserLoginCheck(string phone, string password)
        {
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UserLoginCheck", phoneParameter, passwordParameter);
        }
    
        public virtual int UserUpdateType(Nullable<int> userID, Nullable<int> typeID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserUpdateType", userIDParameter, typeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UserLogin(string phone, string password)
        {
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UserLogin", phoneParameter, passwordParameter);
        }
    
        public virtual ObjectResult<AgencyInsert_Result> AgencyInsert(string agencyName, string agencyNameArabic, Nullable<int> userID, string address, string phone)
        {
            var agencyNameParameter = agencyName != null ?
                new ObjectParameter("AgencyName", agencyName) :
                new ObjectParameter("AgencyName", typeof(string));
    
            var agencyNameArabicParameter = agencyNameArabic != null ?
                new ObjectParameter("AgencyNameArabic", agencyNameArabic) :
                new ObjectParameter("AgencyNameArabic", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AgencyInsert_Result>("AgencyInsert", agencyNameParameter, agencyNameArabicParameter, userIDParameter, addressParameter, phoneParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> AgencyRouteInsert(Nullable<int> agencyID, Nullable<int> routeID, Nullable<System.DateTime> date, string travelTime, Nullable<int> availableTickets, Nullable<double> price, string description)
        {
            var agencyIDParameter = agencyID.HasValue ?
                new ObjectParameter("AgencyID", agencyID) :
                new ObjectParameter("AgencyID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var travelTimeParameter = travelTime != null ?
                new ObjectParameter("TravelTime", travelTime) :
                new ObjectParameter("TravelTime", typeof(string));
    
            var availableTicketsParameter = availableTickets.HasValue ?
                new ObjectParameter("AvailableTickets", availableTickets) :
                new ObjectParameter("AvailableTickets", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("AgencyRouteInsert", agencyIDParameter, routeIDParameter, dateParameter, travelTimeParameter, availableTicketsParameter, priceParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<AgencyRoutSelect_Result> AgencyRoutSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AgencyRoutSelect_Result>("AgencyRoutSelect");
        }
    
        public virtual ObjectResult<Nullable<decimal>> CityInsert(string cityCode, string cityName, string cityNameArabic)
        {
            var cityCodeParameter = cityCode != null ?
                new ObjectParameter("CityCode", cityCode) :
                new ObjectParameter("CityCode", typeof(string));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var cityNameArabicParameter = cityNameArabic != null ?
                new ObjectParameter("CityNameArabic", cityNameArabic) :
                new ObjectParameter("CityNameArabic", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CityInsert", cityCodeParameter, cityNameParameter, cityNameArabicParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> RouteInsert(string routCode, string from, string to, string description, string descriptionInArabic)
        {
            var routCodeParameter = routCode != null ?
                new ObjectParameter("RoutCode", routCode) :
                new ObjectParameter("RoutCode", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionInArabicParameter = descriptionInArabic != null ?
                new ObjectParameter("DescriptionInArabic", descriptionInArabic) :
                new ObjectParameter("DescriptionInArabic", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("RouteInsert", routCodeParameter, fromParameter, toParameter, descriptionParameter, descriptionInArabicParameter);
        }
    
        public virtual ObjectResult<RouteSelect_Result> RouteSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RouteSelect_Result>("RouteSelect");
        }
    
        public virtual ObjectResult<TicketSelect_Result> TicketSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TicketSelect_Result>("TicketSelect");
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> TokenMangerInsert(Nullable<int> userID, string deviceID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var deviceIDParameter = deviceID != null ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("TokenMangerInsert", userIDParameter, deviceIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> UserBankAccountInsert(Nullable<int> iD, Nullable<int> userID, string bank, string branch, string banckAccount, string atmCardNo, Nullable<bool> primeryAccount)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var bankParameter = bank != null ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var banckAccountParameter = banckAccount != null ?
                new ObjectParameter("BanckAccount", banckAccount) :
                new ObjectParameter("BanckAccount", typeof(string));
    
            var atmCardNoParameter = atmCardNo != null ?
                new ObjectParameter("AtmCardNo", atmCardNo) :
                new ObjectParameter("AtmCardNo", typeof(string));
    
            var primeryAccountParameter = primeryAccount.HasValue ?
                new ObjectParameter("primeryAccount", primeryAccount) :
                new ObjectParameter("primeryAccount", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("UserBankAccountInsert", iDParameter, userIDParameter, bankParameter, branchParameter, banckAccountParameter, atmCardNoParameter, primeryAccountParameter);
        }
    
        public virtual ObjectResult<UserBankAccountSelect_Result> UserBankAccountSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserBankAccountSelect_Result>("UserBankAccountSelect");
        }
    
        public virtual ObjectResult<UserSelect_Result> UserSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserSelect_Result>("UserSelect");
        }
    
        public virtual ObjectResult<TokenManagerCheckUserValidToken_Result> TokenManagerCheckUserValidToken(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TokenManagerCheckUserValidToken_Result>("TokenManagerCheckUserValidToken", userIDParameter);
        }
    
        public virtual ObjectResult<CitySelect_Result> CitySelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CitySelect_Result>("CitySelect");
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> TokenManagerSelectByUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("TokenManagerSelectByUserID", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TokenManagerSelectByToken(Nullable<System.Guid> token)
        {
            var tokenParameter = token.HasValue ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TokenManagerSelectByToken", tokenParameter);
        }
    
        public virtual ObjectResult<TicketInsert_Result> TicketInsert(Nullable<int> userID, Nullable<int> agencyRoutID, Nullable<double> price, Nullable<System.DateTime> issueDate, string paymentBy, string payTransactionNo, string bank, string accountNo)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var agencyRoutIDParameter = agencyRoutID.HasValue ?
                new ObjectParameter("AgencyRoutID", agencyRoutID) :
                new ObjectParameter("AgencyRoutID", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var paymentByParameter = paymentBy != null ?
                new ObjectParameter("PaymentBy", paymentBy) :
                new ObjectParameter("PaymentBy", typeof(string));
    
            var payTransactionNoParameter = payTransactionNo != null ?
                new ObjectParameter("PayTransactionNo", payTransactionNo) :
                new ObjectParameter("PayTransactionNo", typeof(string));
    
            var bankParameter = bank != null ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TicketInsert_Result>("TicketInsert", userIDParameter, agencyRoutIDParameter, priceParameter, issueDateParameter, paymentByParameter, payTransactionNoParameter, bankParameter, accountNoParameter);
        }
    
        public virtual ObjectResult<AgencySelect_Result> AgencySelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AgencySelect_Result>("AgencySelect");
        }
    }
}
